{{- $global := .Values.global | default dict }}
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: K0sControlPlane
metadata:
  name: {{ include "k0scontrolplane.name" . }}
spec:
  replicas: {{ .Values.controlPlaneNumber }}
  version: {{ .Values.k0s.version }}
  k0sConfigSpec:
    {{- if $global.k0sURL }}
    downloadURL: "{{ $global.k0sURL }}/k0s-{{ .Values.k0s.version }}-amd64"
    {{- end }}
    {{- if or $global.registryCertSecret $global.k0sURLCertSecret }}
    {{- $certs := dict "registry.crt" $global.registryCertSecret "k0s-url.crt" $global.k0sURLCertSecret }}
    files:
      {{- range $path, $secret := $certs }}
      {{- if $secret }}
      - contentFrom:
          secretRef:
            name: {{ $secret }}
            key: ca.crt
        permissions: "0664"
        path: /usr/local/share/ca-certificates/{{ $path }}
      {{- end }}
      {{- end }}
    preStartCommands:
    - "sudo update-ca-certificates"
    {{- end }}
    args:
      - --enable-worker
      - --enable-cloud-provider
      - --kubelet-extra-args="--cloud-provider=external"
      - --disable-components=konnectivity-server
    k0s:
      apiVersion: k0s.k0sproject.io/v1beta1
      kind: ClusterConfig
      metadata:
        name: k0s
      spec:
        api:
          extraArgs:
            anonymous-auth: "true"
          {{- with .Values.k0s.api.extraArgs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
        network:
          provider: calico
          calico:
            mode: ipip
        {{- if $global.registry }}
        images:
          metricsserver:
            image: "{{ $global.registry }}/k0sproject/metrics-server"
          kubeproxy:
            image: "{{ $global.registry }}/k0sproject/kube-proxy"
          coredns:
            image: "{{ $global.registry }}/k0sproject/coredns"
          pause:
            image: "{{ $global.registry }}/k0sproject/pause"
          calico:
            cni:
              image: "{{ $global.registry }}/k0sproject/calico-cni"
            node:
              image: "{{ $global.registry }}/k0sproject/calico-node"
            kubecontrollers:
              image: "{{ $global.registry }}/k0sproject/calico-kube-controllers"
        {{- end }}
        extensions:
          helm:
            {{- if not $global.registry }}
            repositories:
              - name: mirantis
                url: https://charts.mirantis.com
            {{- end }}
            charts:
              - name: gcp-cloud-controller-manager
                namespace: kube-system
                {{- if $global.registry }}
                chartname: oci://{{ $global.registry }}/charts/gcp-cloud-controller-manager
                {{- else }}
                chartname: mirantis/gcp-cloud-controller-manager
                {{- end }}
                version: "0.0.1"
                values: |
                  cloudConfig:
                    enabled: true
                    data: W0dsb2JhbF0KbXVsdGl6b25lPXRydWUK
                  apiServer:
                    port: 6443
                  cloudCredentials:
                    secretName: gcp-cloud-sa
                    secretKey: cloud-sa.json
                  clusterCIDR: {{ first .Values.clusterNetwork.pods.cidrBlocks }}
                  image:
                    {{- if $global.registry }}
                    repository: {{ $global.registry }}/k8s-staging-cloud-provider-gcp/cloud-controller-manager
                    {{- end }}
                    tag: v32.2.3
                  args:
                    - --cloud-provider=gce
                    - --leader-elect=true
                    - --use-service-account-credentials=true
                    - --allocate-node-cidrs=true
                    - --configure-cloud-routes=false
                    - --v=2
              - name: gcp-compute-persistent-disk-csi-driver
                namespace: kube-system
                {{- if $global.registry }}
                chartname: oci://{{ $global.registry }}/charts/gcp-compute-persistent-disk-csi-driver
                {{- else }}
                chartname: mirantis/gcp-compute-persistent-disk-csi-driver
                {{- end }}
                version: "0.0.2"
                values: |
                  cloudCredentials:
                    secretName: gcp-cloud-sa
                    secretKey: cloud-sa.json
                  node:
                    linux:
                      enabled: true
                      kubeletPath: /var/lib/k0s/kubelet
                    windows:
                      enabled: false
                  defaultStorageClass:
                    enabled: true
                  {{- if $global.registry }}
                  controller:
                    provisioner:
                      image:
                        repository: {{ $global.registry }}/sig-storage/csi-provisioner
                    attacher:
                      image:
                        repository: {{ $global.registry }}/sig-storage/csi-attacher
                    resizer:
                      image:
                        repository: {{ $global.registry }}/sig-storage/csi-resizer
                    snapshotter:
                      image:
                        repository: {{ $global.registry }}/sig-storage/csi-snapshotter
                    driver:
                      image:
                        repository: {{ $global.registry }}/cloud-provider-gcp/csi-gcp-compute-persistent-disk-csi-driver
                  node:
                    registrar:
                      repository: {{ $global.registry }}/sig-storage/csi-node-driver-registrar
                    driver:
                      image:
                        repository: {{ $global.registry }}/cloud-provider-gcp/csi-gcp-compute-persistent-disk-csi-driver
                  {{- end }}
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: GCPMachineTemplate
      name: {{ include "gcpmachinetemplate.controlplane.name" . }}
      namespace: {{ .Release.Namespace }}
